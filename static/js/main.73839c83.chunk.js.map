{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/depthFirstSearch.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","isVisited","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","console","log","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","unweightedAlgorithm","endNode","algorithm","stack","pop","getNeighbors","shuffle","a","i","j","Math","floor","random","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","startNodeSelected","finishNodeSelected","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","updateGridWithNewStartNode","updateGridWithNewFinishNode","nodesInShortestPathOrder","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","Fragment","onClick","visualizeAlgorithm","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","animationDirection","slice","newNode","prevStartRow","prevStartCol","newStartNode","prevFinishRow","prevFinishCol","newFinishNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIqBA,G,uLACT,IAAD,EAUHC,KAAKC,MARPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,IAEIC,EAAiBP,EACnB,cACAC,EACA,aACAC,EACA,YACA,GAEJ,OACE,yBACEM,GAAE,eAAUF,EAAV,YAAiBP,GACnBU,UAAS,eAAUF,GACnBJ,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,W,GA1BSK,cCA3B,SAASC,EAAUC,EAAMC,EAAWC,GACzC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EACrBH,EAAUI,WAAY,EAEtB,IADA,IAAMC,EAuCR,SAAsBN,GACpB,IAAMO,EAAQ,GADY,uBAE1B,YAAkBP,EAAlB,+CAAwB,CAAC,IAAdN,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdc,EAAa,QACtBD,EAAME,KAAMD,IAFQ,oFAFE,kFAO1B,OAAOD,EA9CgBG,CAAaV,GAC3BM,EAAeK,QAAQ,CAC9BC,EAAqBN,GACrB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYvB,OAAhB,CAGA,GAAIuB,EAAYT,WAAaW,IAAU,OAAOZ,EAI9C,GAHAU,EAAYR,WAAY,EACxBF,EAAoBM,KAAMI,GAC1BG,QAAQC,IAAKd,EAAoBQ,QAC7BE,IAAgBX,EAAY,OAAOC,EACvCe,EAA0BL,EAAab,KAI3C,SAASY,EAAqBN,GAC5BA,EAAea,MAAM,SAACC,EAAOC,GAAR,OAAkBD,EAAMhB,SAAWiB,EAAMjB,YAGhE,SAASc,EAA0BV,EAAMR,GACvC,IAAMsB,EAOR,SAAgCd,EAAMR,GACpC,IAAMuB,EAAY,GACXpC,EAAYqB,EAAZrB,IAAKO,EAAOc,EAAPd,IACRA,EAAM,GAAG6B,EAAUd,KAAMT,EAAKN,EAAM,GAAGP,IACvCO,EAAMM,EAAKW,OAAS,GAAGY,EAAUd,KAAMT,EAAKN,EAAM,GAAGP,IACrDA,EAAM,GAAGoC,EAAUd,KAAMT,EAAKN,GAAKP,EAAM,IACzCA,EAAMa,EAAK,GAAGW,OAAS,GAAGY,EAAUd,KAAMT,EAAKN,GAAKP,EAAM,IAC9D,OAAOoC,EAAUC,QAAQ,SAAAC,GAAQ,OAAKA,EAASpB,aAdpBqB,CAAuBlB,EAAMR,GADX,uBAE7C,YAAuBsB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASrB,SAAWI,EAAKJ,SAAW,EACpCqB,EAASE,aAAenB,GAJmB,mFCxBxC,SAASoB,EAAqB5B,EAAMC,EAAW4B,EAASC,GAC7D,IAAM3B,EAAsB,GACtB4B,EAAQ,GACd9B,EAAUI,WAAY,EACtB0B,EAAMtB,KAAMR,GACZA,EAAUG,SAAW,EAErB,IADA,IAAII,EAAO,KACFuB,EAAMpB,QASb,GARkB,qBAAdmB,EACFtB,EAAOuB,EAAMC,MACU,uBAAdF,IACTtB,EAAOuB,EAAMjB,SAGfX,EAAoBM,KAAMD,IAEtBA,EAAKlB,OAAT,CAKA,GAAIkB,IAASqB,EACX,OAAO1B,EAGT,IAAMmB,EAAqBW,EAAczB,EAAMR,GAC/CkC,EAASZ,GAnBY,2BAsBrB,YAAuBA,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACpCA,EAASpB,WAAcoB,EAASnC,SACnCmC,EAASE,aAAenB,EACxBiB,EAASrB,SAAWI,EAAKJ,SAAW,EACpCqB,EAASpB,WAAY,EACrB0B,EAAMtB,KAAMgB,KA3BK,oFAiCzB,SAASQ,EAAczB,EAAMR,GAC3B,IAAMuB,EAAY,GACXpC,EAAYqB,EAAZrB,IAAKO,EAAOc,EAAPd,IAKZ,OAJIA,EAAM,GAAG6B,EAAUd,KAAMT,EAAKN,EAAM,GAAGP,IACvCO,EAAMM,EAAKW,OAAS,GAAGY,EAAUd,KAAMT,EAAKN,EAAM,GAAGP,IACrDA,EAAM,GAAGoC,EAAUd,KAAMT,EAAKN,GAAKP,EAAM,IACzCA,EAAMa,EAAK,GAAGW,OAAS,GAAGY,EAAUd,KAAMT,EAAKN,GAAKP,EAAM,IACvDoC,EAAUC,QAAQ,SAAAC,GAAQ,OAAKA,EAASpB,aAGjD,SAAS6B,EAASC,GAChB,IAAK,IAAIC,EAAID,EAAExB,OAAS,EAAGyB,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAOD,KAAKE,UAAaJ,EAAI,IADP,EAEtB,CAACD,EAAEE,GAAIF,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEE,GAF4B,KAIvC,OAAOF,E,UCrDLM,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAEDC,E,YACnB,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACX9C,KAAM,GACN+C,gBAAgB,EAChBC,mBAAmB,EACnBC,oBAAoB,GANT,E,iFAWb,IAAMjD,EAAOkD,IACbjE,KAAKkE,SAAU,CAACnD,W,sCAIDN,EAAKP,GACpB,IAAIiE,EAAU,GACVnE,KAAK6D,MAAM9C,KAAKN,GAAKP,GAAKE,SAC5BJ,KAAKkE,SAAU,CAACH,mBAAmB,IACnCI,EAAUnE,KAAK6D,MAAM9C,MACZf,KAAK6D,MAAM9C,KAAKN,GAAKP,GAAKC,UACnCH,KAAKkE,SAAU,CAACF,oBAAoB,IACpCG,EAAUnE,KAAK6D,MAAM9C,MAErBoD,EAAUC,EAA2BpE,KAAK6D,MAAM9C,KAAMN,EAAKP,GAE7DF,KAAKkE,SAAU,CAACnD,KAAMoD,EAASL,gBAAgB,M,uCAG/BrD,EAAKP,GACrB,GAAKF,KAAK6D,MAAMC,eAAhB,CAEA,IAAIK,EAAU,GAGZA,EADEnE,KAAK6D,MAAME,kBACHM,EAA4BrE,KAAK6D,MAAM9C,KAAMN,EAAKP,GACnDF,KAAK6D,MAAMG,mBACVM,EAA6BtE,KAAK6D,MAAM9C,KAAMN,EAAKP,GAGnDkE,EAA2BpE,KAAK6D,MAAM9C,KAAMN,EAAKP,GAE7DF,KAAKkE,SAAU,CAACnD,KAAMoD,O,sCAIlBnE,KAAK6D,MAAME,kBACb/D,KAAKkE,SAAU,CAACH,mBAAmB,IAC1B/D,KAAK6D,MAAMG,oBACpBhE,KAAKkE,SAAU,CAACF,oBAAoB,IAEtChE,KAAKkE,SAAU,CAACJ,gBAAgB,M,uCAGhB5C,EAAqBqD,GACrC,IADgE,IAAD,kBACtDpB,GACP,GAAIA,IAAMjC,EAAoBQ,OAI5B,OAHA8C,YAAY,WACV,EAAKC,oBAAqBF,KACzB,GAAKpB,GACF,CAAN,UAEFqB,YAAY,WACV,IAAMjD,EAAOL,EAAoBiC,GAC5BjC,EAAoBb,SACvBqE,SAASC,eAAT,eAAiCpD,EAAKd,IAAtC,YAA6Cc,EAAKrB,MAAOU,UACvD,uBAEH,GAAKuC,IAbDA,EAAI,EAAGA,GAAKjC,EAAoBQ,OAAQyB,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,0CAiBnCoB,GACnB,IAD8C,IAAD,WACpCpB,GACPqB,YAAY,WACV,IAAMjD,EAAOgD,EAAyBpB,GACtCuB,SAASC,eAAT,eAAiCpD,EAAKd,IAAtC,YAA6Cc,EAAKrB,MAAOU,UACvD,4BACD,GAAKuC,IALDA,EAAI,EAAGA,EAAIoB,EAAyB7C,OAAQyB,IAAM,EAAlDA,K,yCASSN,GAAY,IACvB9B,EAAQf,KAAK6D,MAAb9C,KACDC,EAAYD,EAAKyC,GAAgBC,GACjCxC,EAAaF,EAAK2C,GAAiBC,GACrCzC,EAAsB,GAE1B,OAAQ2B,GACN,IAAK,WACH3B,EAAsBJ,EAAUC,EAAMC,EAAWC,GACjD,MACF,IAAK,mBACHC,EAAsByB,EACpB5B,EACAC,EACAC,EACA,oBAEF,MACF,IAAK,qBACHC,EAAsByB,EACpB5B,EACAC,EACAC,EACA,sBAMN,IAAMsD,EFlEH,SAAsCtD,GAG3C,IAFA,IAAMsD,EAA2B,GAC7BK,EAAc3D,EACK,OAAhB2D,GACLL,EAAyBM,QAASD,GAClCA,EAAcA,EAAYlC,aAE5B,OAAO6B,EE2D4BO,CAA6B7D,GAC9DjB,KAAK+E,iBAAkB7D,EAAqBqD,K,+BAGnC,IAAD,SACuBvE,KAAK6D,MAA7B9C,EADC,EACDA,KAAM+C,EADL,EACKA,eAEb,OACE,kBAAC,IAAMkB,SAAP,KACE,4BAAQC,QAAS,kBAAM,EAAKC,mBAAoB,cAAhD,kCAGA,4BAAQD,QAAS,kBAAM,EAAKC,mBAAoB,sBAAhD,wCAGA,4BAAQD,QAAS,kBAAM,EAAKC,mBAAoB,wBAAhD,0CAGA,yBAAKtE,UAAU,QACZG,EAAKoE,KAAK,SAAC1E,EAAK2E,GACf,OACE,yBAAKC,IAAKD,GACP3E,EAAI0E,KAAK,SAAC5D,EAAM+D,GAAa,IACrB7E,EAAuCc,EAAvCd,IAAKP,EAAkCqB,EAAlCrB,IAAKC,EAA6BoB,EAA7BpB,SAAUC,EAAmBmB,EAAnBnB,QAASC,EAAUkB,EAAVlB,OACpC,OACE,kBAAC,EAAD,CACEgF,IAAKC,EACLpF,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRyD,eAAgBA,EAChBxD,YAAa,SAACG,EAAKP,GAAN,OACX,EAAKqF,gBAAiB9E,EAAKP,IAC7BK,aAAc,SAACE,EAAKP,GAAN,OACZ,EAAKsF,iBAAkB/E,EAAKP,IAC9BM,UAAW,kBAAM,EAAKiF,iBACtBhF,IAAKA,iB,GAtJwBI,aAmK7CoD,EAAiB,WAErB,IADA,IAAMlD,EAAO,GACJN,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMiF,EAAa,GACVxF,EAAM,EAAGA,EAAM,GAAIA,IAC1BwF,EAAWlE,KAAMmE,EAAYzF,EAAKO,IAEpCM,EAAKS,KAAMkE,GAEb,OAAO3E,GAGH4E,EAAa,SAACzF,EAAKO,GACvB,MAAO,CACLP,MACAO,MACAL,QAASK,IAAQ+C,GAAkBtD,IAAQuD,EAC3CtD,SAAUM,IAAQiD,GAAmBxD,IAAQyD,EAC7CxC,SAAUW,IACVV,WAAW,EACXf,QAAQ,EACRqC,aAAc,KACdkD,mBAAoB,OAIlBxB,EAA4B,SAACrD,EAAMN,EAAKP,GAC5C,IAAMiE,EAAUpD,EAAK8E,QACftE,EAAO4C,EAAQ1D,GAAKP,GACpB4F,EAAO,eACRvE,EADQ,CAEXlB,QAASkB,EAAKlB,SAGhB,OADA8D,EAAQ1D,GAAKP,GAAO4F,EACb3B,GAGHE,EAA6B,SAACtD,EAAMN,EAAKP,GAC7C,IAAM6F,EAAevC,EACfwC,EAAevC,EACfU,EAAUpD,EAAK8E,QAGA1B,EAAQ4B,GAAcC,GAC9B5F,SAAU,EAGvB,IAAMmB,EAAO4C,EAAQ1D,GAAKP,GACpB+F,EAAY,eACb1E,EADa,CAEhBnB,SAAS,IAKX,OAHA+D,EAAQ1D,GAAKP,GAAO+F,EACpBzC,EAAiB/C,EACjBgD,EAAiBvD,EACViE,GAGHG,EAA8B,SAACvD,EAAMN,EAAKP,GAC9C,IAAMgG,EAAgBxC,EAChByC,EAAgBxC,EAChBQ,EAAUpD,EAAK8E,QAGA1B,EAAQ+B,GAAeC,GAC/BhG,UAAW,EAGxB,IAAMoB,EAAO4C,EAAQ1D,GAAKP,GACpBkG,EAAa,eACd7E,EADc,CAEjBpB,UAAU,IAKZ,OAHAgE,EAAQ1D,GAAKP,GAAOkG,EACpB1C,EAAkBjD,EAClBkD,EAAkBzD,EACXiE,GC/OMkC,MARf,WACE,OACE,yBAAKzF,UAAU,OACb,kBAAC,EAAD,QCKc0F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73839c83.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra (grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  startNode.isVisited = true;\r\n  const unvisitedNodes = getAllNodes (grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance (unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift ();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push (closestNode);\r\n    console.log (visitedNodesInOrder.length);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors (closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance (unvisitedNodes) {\r\n  unvisitedNodes.sort ((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors (node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors (node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors (node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push (grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push (grid[row + 1][col]);\r\n  if (col > 0) neighbors.push (grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push (grid[row][col + 1]);\r\n  return neighbors.filter (neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes (grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push (node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder (finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift (currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs either weightedAlgorithm or Breadth First Search algorithm;\r\n// returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function unweightedAlgorithm (grid, startNode, endNode, algorithm) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push (startNode);\r\n  startNode.distance = 0;\r\n  let node = null;\r\n  while (!!stack.length) {\r\n    if (algorithm === 'depthFirstSearch') {\r\n      node = stack.pop ();\r\n    } else if (algorithm === 'breadthFirstSearch') {\r\n      node = stack.shift ();\r\n    }\r\n\r\n    visitedNodesInOrder.push (node);\r\n\r\n    if (node.isWall) {\r\n      continue;\r\n    }\r\n\r\n    //end node is reached: return all nodes visited in order\r\n    if (node === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    const unvisitedNeighbors = getNeighbors (node, grid);\r\n    shuffle (unvisitedNeighbors);\r\n\r\n    //push all unvisited neighbors onto stack, and set link to previous node\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      if (!neighbor.isVisited && !neighbor.isWall) {\r\n        neighbor.previousNode = node;\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.isVisited = true;\r\n        stack.push (neighbor);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors (node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push (grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push (grid[row + 1][col]);\r\n  if (col > 0) neighbors.push (grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push (grid[row][col + 1]);\r\n  return neighbors.filter (neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction shuffle (a) {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor (Math.random () * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {unweightedAlgorithm} from '../algorithms/depthFirstSearch';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 30;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor () {\r\n    super ();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodeSelected: false,\r\n      finishNodeSelected: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount () {\r\n    const grid = getInitialGrid ();\r\n    this.setState ({grid});\r\n  }\r\n\r\n  //handles either placing walls, or setting start and finish nodes\r\n  handleMouseDown (row, col) {\r\n    let newGrid = [];\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState ({startNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState ({finishNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else {\r\n      newGrid = getNewGridWithWallToggled (this.state.grid, row, col);\r\n    }\r\n    this.setState ({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter (row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    let newGrid = [];\r\n    //selecting new start node\r\n    if (this.state.startNodeSelected) {\r\n      newGrid = updateGridWithNewStartNode (this.state.grid, row, col);\r\n    } else if (this.state.finishNodeSelected) {\r\n      newGrid = updateGridWithNewFinishNode (this.state.grid, row, col);\r\n    } else {\r\n      //placing walls\r\n      newGrid = getNewGridWithWallToggled (this.state.grid, row, col);\r\n    }\r\n    this.setState ({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp () {\r\n    if (this.state.startNodeSelected) {\r\n      this.setState ({startNodeSelected: false});\r\n    } else if (this.state.finishNodeSelected) {\r\n      this.setState ({finishNodeSelected: false});\r\n    }\r\n    this.setState ({mouseIsPressed: false});\r\n  }\r\n\r\n  animateAlgorithm (visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout (() => {\r\n          this.animateShortestPath (nodesInShortestPathOrder);\r\n        }, 20 * i);\r\n        return;\r\n      }\r\n      setTimeout (() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (!visitedNodesInOrder.isWall) {\r\n          document.getElementById (`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 20 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath (nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout (() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById (`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm (algorithm) {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = [];\r\n\r\n    switch (algorithm) {\r\n      case 'djikstra':\r\n        visitedNodesInOrder = dijkstra (grid, startNode, finishNode);\r\n        break;\r\n      case 'depthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm (\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'depthFirstSearch'\r\n        );\r\n        break;\r\n      case 'breadthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm (\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'breadthFirstSearch'\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder (finishNode);\r\n    this.animateAlgorithm (visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render () {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={() => this.visualizeAlgorithm ('djikstra')}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeAlgorithm ('depthFirstSearch')}>\r\n          Visualize DepthFirstSearch Algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeAlgorithm ('breadthFirstSearch')}>\r\n          Visualize BreadthFirstSearch Algorithm\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map ((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map ((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) =>\r\n                        this.handleMouseDown (row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter (row, col)}\r\n                      onMouseUp={() => this.handleMouseUp ()}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push (createNode (col, row));\r\n    }\r\n    grid.push (currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    animationDirection: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice ();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewStartNode = (grid, row, col) => {\r\n  const prevStartRow = START_NODE_ROW;\r\n  const prevStartCol = START_NODE_COL;\r\n  const newGrid = grid.slice ();\r\n\r\n  //set old start node to normal node\r\n  const oldStartNode = newGrid[prevStartRow][prevStartCol];\r\n  oldStartNode.isStart = false;\r\n\r\n  //set new start node\r\n  const node = newGrid[row][col];\r\n  const newStartNode = {\r\n    ...node,\r\n    isStart: true,\r\n  };\r\n  newGrid[row][col] = newStartNode;\r\n  START_NODE_ROW = row;\r\n  START_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewFinishNode = (grid, row, col) => {\r\n  const prevFinishRow = FINISH_NODE_ROW;\r\n  const prevFinishCol = FINISH_NODE_COL;\r\n  const newGrid = grid.slice ();\r\n\r\n  //set old finish node to normal node\r\n  const oldStartNode = newGrid[prevFinishRow][prevFinishCol];\r\n  oldStartNode.isFinish = false;\r\n\r\n  //set new finish node\r\n  const node = newGrid[row][col];\r\n  const newFinishNode = {\r\n    ...node,\r\n    isFinish: true,\r\n  };\r\n  newGrid[row][col] = newFinishNode;\r\n  FINISH_NODE_ROW = row;\r\n  FINISH_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}